needs subcell'

chain: dump'
{{
  variables| A B |
    
  : visible? ( val -- t | f )
    31 126 within ;

  : printField ( val -- )
    dup 10 < [ 48 + ] [ 55 + ] if putc ;

  : printWords ( addr -- )
    ^subcell'highWord ^subcell'highByte ^subcell'highNibble
    8 [ dup ^subcell'nibble@ printField 1+ ] times drop space ;

  : printChar ( val -- )
    dup visible? [ putc ] [ drop '_ putc ] if ;

  : printChars ( addr -- )
    ^subcell'highWord ^subcell'highByte
    16 [ dup ^subcell'c@ printChar 1+ ] times drop cr ;
    
  : printAddr ( addr -- )
      '[ putc
      10000000 /mod putn
      1000000  /mod putn
      100000   /mod putn
      10000    /mod putn
      1000     /mod putn
      100      /mod putn
      10       /mod putn
      1        /mod putn 
      '] putc  drop ;

  : dumpLine ( addr -- )
    @A printAddr space
    4 [ @A printWords A ++ ] times @B printChars @A !B ;
---reveal---
  : dump ( numLines addr -- )
    cr dup !A !B [ dumpLine ] times ;
}}

;chain

