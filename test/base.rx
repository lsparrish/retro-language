global
needs test'
with| test' |

TEST: 1+
  [    3 1+ ] expected: { 4 }
  [ 13 2 1+ ] expected: { 3 13 }
  [   -2 1+ ] expected: { -1 } ;

TEST: 1-
  [    3 1- ] expected: { 2 }
  [ 13 2 1- ] expected: { 1 13 }
  [    0 1- ] expected: { -1 }
  [   -1 1- ] expected: { -2 } ;

TEST: swap
  [   3 2 swap ] expected: { 3 2 }
  [ 1 2 3 swap ] expected: { 2 3 1 } ;

TEST: drop
  [   2 1 drop      ] expected: { 2 }
  [ 3 2 1 drop drop ] expected: { 3 }
  [ 1 2 3 4 5 drop depth ] expected: { 4 4 3 2 1 } ;

TEST: and
  [  0  0 and ] expected: {  0 }
  [ -1  0 and ] expected: {  0 }
  [ -1 -1 and ] expected: { -1 } ;

TEST: or
  [  0  0 or ] expected: {  0 }
  [ -1  0 or ] expected: { -1 }
  [ -1 -1 or ] expected: { -1 } ;

TEST: xor
  [  0  0 xor ] expected: {  0 }
  [ -1  0 xor ] expected: { -1 }
  [ -1 -1 xor ] expected: {  0 } ;

create foo 9 ,
TEST: @
 [ foo @ ] expected: { 9 }
  [ base @ ] expected: { 10 } ;

create foo 9 ,
TEST: !
  [ foo @ 10 foo ! foo @ ] expected: { 10 9 } ;

TEST: +
  [ 1 2 +     ] expected: { 3 }
  [ 2 3 4 + + ] expected: { 9 }
  [ 1 2 1 9 + ] expected: { 10 2 1 } ;

TEST: -
  [ 2 1 -     ] expected: { 1 }
  [ 2 4 3 - - ] expected: { 1 }
  [ 1 2 1 9 - ] expected: { -8 2 1 } ;

TEST: *
  [  1  2 *      ] expected: { 2 }
  [  2  3 *      ] expected: { 6 }
  [ -1 10 *      ] expected: { -10 }
  [ -1  2 * -1 * ] expected: { 2 } ;

TEST: /mod
  [  5  2 /mod ] expected: {  2  1 }
  [ -5  2 /mod ] expected: { -2 -1 }
  [ -5 -2 /mod ] expected: {  2 -1 }
  [  5 -2 /mod ] expected: { -2  1 } ;

TEST: <<
  binary
  [ 111000111 11 << ] expected: { 111000111000 }
  decimal ;

TEST: >>
  binary
  [ 111000111000 11 >> ] expected: { 111000111 }
  decimal ;

IO: tib

TEST: dup
  [   1 dup ] expected: { 1 1 }
  [ 2 1 dup ] expected: { 1 1 2 } ;

IO: in
IO: out
IO: accept

TEST: here
  [ here heap @ = ] expected: { -1 }
  [ here  1 allot here < ] expected: { -1 }
  [ here -1 allot here > ] expected: { -1 } ;

TEST: ,
  [ here 0 , here swap - ] expected: { 1 }
  [ here 12 , @ ] expected: { 12 }
  here  1 , 2 , 3 ,
  [ @+ swap @+ swap @ ] expected: { 3 2 1 } ;

create foo
TEST: create
  [ @last d->name "foo" compare ] expected: { -1 }
  [ @last d->name "bar" compare ] expected: {  0 }
  [ @last @d->class &.data = ] expected: { -1 }
  [ @last @d->class &.data <> ] expected: { 0 } ;

: foo 12 ;
: bar foo 2 * ;
TEST: :
  [ foo bar ] expected: { 24 12 } ;

"foo" header
TEST: header
  [ @last d->name "foo" compare ] expected: { -1 }
  [ @last d->name "bar" compare ] expected: {  0 } ;

runTests bye

